Mockito et test - done
======================

Principe
--------

Pour rappel il existe 3 types de test :
    - les tests unitaires
    - les tests d'intégration
    - les tests fonctionnels

On se concentrera dans la formation sur les 2 premiers. La séparation entre
les deux est fortement marquée dans le framework Spring.

Par défaut Spring considère qu'un test est un test unitaire, **il n'injecte
donc aucune dépendance !**. Tous les objets portant l'annotation *@Autowire*
auront donc comme valeur *null*

Test unitaire et mockito
^^^^^^^^^^^^^^^^^^^^^^^^

Par défaut Spring considère qu'un test est un test unitaire et n'injecte
aucune dépendance. Il faut donc les "mocker", ie les remplacer par un objet
factice dont on paramêtrera le fonction.

Cela se fait en deux parties :

1. Au Niveau de la classe de test, on ajoute l'annotation @InjectMocks à
l'objet que l'on veut tester et @Mock au objet que l'on souhaite injecter
en temps que mock.

Par exemple :

.. code-block:: java

    @InjectMocks
    private SampleController sampleController;

    @Mock
    private CerebookUserRepository mockCerebookUserRepository;

Dans le cas présent, on cherche à tester un SampleController et celui ci
possède une dépendance *@Autowired* de type CerebookUserRepository.
Le mock sera donc injecté en temps que dépendance.

2. Au niveau de la méthode de test, on paramêtre le comportement de la
fonction avec la syntaxe when(...).thenReturn(...)

Par exemple :

.. code-block:: java

    when(mockCerebookUserRepository.findAll()).thenReturn(new ArrayList<>());
    assert(sampleController.getAllCerebookUser().isEmpty());

`Unit test example <https://github.com/Aenori/HerokuProject/blob/main/src/test/java/wcsdata/xmen/controller/SampleControllerTest.java>`_

Ligne 28 pour le when(...).thenReturn(...)

Test d'intégration
^^^^^^^^^^^^^^^^^^

Dans un test d'intégration on va tester l'ensemble du site. Ces tests sont un
peu plus gourmand en ressources mais très efficace (je conseille d'en mettre
un par route, ne serait-ce que pour vérifier quíl n'y a pas un gros bug).

Il se fond avec l'objet MockMvc :

.. code-block:: java

    @Autowired
    private MockMvc mvc;

Qui nécesssite l'annotation AutoConfigureMockMvc sur la classe :

.. code-block:: java

    @AutoConfigureMockMvc(addFilters = false)
    class SampleControllerRoutesTest {
        ...
    }

Ensuite on appelle des requêtes ainsi :

.. code-block:: java

    mvc.perform(get("/cerebookUsers")
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(content()
                        .contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$[0].name", is("Wolverine")));
    }

Dans le cas présent toutes les dépendances sont crées, on teste
vraiment l'ensemble de l'application.

`Integration test example <https://github.com/Aenori/HerokuProject/blob/main/src/test/java/wcsdata/xmen/integration/SampleControllerRoutesTest.java>`_

Autres annotations utiles
^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: java

    @Transactional

Créée une transaction au début de chaque test et la rollback à la fin du test.

.. code-block:: java

    @ActiveProfiles("test")

Active un profil (et donc la lecture du fichier application-properties associé)

.. code-block:: java

    @AutoConfigureMockMvc(addFilters = false)

La mention addFilters = false désactive l'identification
